#!/usr/bin/env bash
# Hagan Franks <hagan.franks@gmail.com>
# Version 0.0.1

# exit script upon error

set -e

# If no .env found, exit!
EXIT_ON_NO_ENV=1

abs_path() {
  perl -MCwd -le '
    for (@ARGV) {
      if ($p = Cwd::abs_path $_) {
        print $p;
      } else {
        warn "abs_path: $_: $!\n";
        $ret = 1;
      }
    }
    exit $ret' "$@"
}

script_path=$(abs_path $0)
script_dir=$(dirname ${script_path})

## setup exit trap
SRC_SCRIPT=${script_dir}/lib/setup-exit-trap.sh
SRC_NUM=1
if test -f ${SRC_SCRIPT}; then
  . "${SRC_SCRIPT}" || {
    echo "${SRC_SCRIPT} had an error! exiting.."
    exit 1
  }
else
  echo "ERROR-${SRC_NUM}: missing ${SRC_SCRIPT}!"
  exit 1
fi

## setup required binaries
SRC_SCRIPT=${script_dir}/lib/setup-binary-vars.sh
SRC_NUM=2
if test -f ${SRC_SCRIPT}; then
  . "${SRC_SCRIPT}" || {
    echo "${SRC_SCRIPT} had an error! exiting.."
    exit 1
  }
else
  echo "ERROR-${SRC_NUM}: missing ${SRC_SCRIPT}!"
  exit 1
fi

## load project .env file
SRC_SCRIPT=${script_dir}/lib/load-env-vars.sh
SRC_NUM=3
if test -f ${SRC_SCRIPT}; then
  . "${SRC_SCRIPT}" || {
    echo "${SRC_SCRIPT} had an error! exiting.."
    exit 1
  }
else
  echo "ERROR-${SRC_NUM}: missing ${SRC_SCRIPT}!"
  exit 1
fi

## add ask-function
SRC_SCRIPT=${script_dir}/lib/functions.sh
SRC_NUM=4
if test -f ${SRC_SCRIPT}; then
  . "${SRC_SCRIPT}" || {
    echo "${SRC_SCRIPT} had an error! exiting.."
    exit 1
  }
else
  echo "ERROR-${SRC_NUM}: missing ${SRC_SCRIPT}!"
  exit 1
fi

if [[ -z ${LEGACY_PG_DB+x} ]]; then
  echo "ERROR-1: 'LEGACY_PG_DB' not defined as a shell variable."
  echo "Rerun with LEGACY_PG_DB='database name' $0"
  exit 1
fi

if [[ -z ${ADMIN_DB_USER+x} ]]; then
  echo "ERROR-2: 'ADMIN_DB_USER' not defined as a shell variable."
  echo "To fix: add 'ADMIN_DB_USER' line to the .env file."
  exit 1
fi

if [[ -z ${ADMIN_DB_PASS+x} ]]; then
  echo "ERROR-3: 'ADMIN_DB_PASS' not defined as a shell variable."
  echo "To fix: add 'ADMIN_DB_PASS' line to the .env file."
  exit 1
fi

if [[ -z ${LEGACY_PG_PORT+x} ]]; then
  echo "ERROR-4: 'LEGACY_PG_PORT' not defined as a shell variable."
  echo "To fix: add 'LEGACY_PG_PORT' line to the .env file."
  exit 1
fi

if [[ -z ${LEGACY_PG_HOST+x} ]]; then
  echo "ERROR-3: 'LEGACY_PG_HOST' not defined as a shell variable."
  echo "To fix: add 'LEGACY_PG_HOST' line to the .env file."
  exit 1
fi


PGPASSWORD=${ADMIN_DB_PASS} ${VACUUMDB} --host=${LEGACY_PG_HOST} --user=${ADMIN_DB_USER} --port=${LEGACY_PG_PORT} -z -f ${LEGACY_PG_DB}
PGPASSWORD=${ADMIN_DB_PASS} ${PSQL} --user=${ADMIN_DB_USER} --host=${LEGACY_PG_HOST} --port=${LEGACY_PG_PORT} -c "GRANT CONNECT ON DATABASE ${LEGACY_PG_DB} TO ${DJANGO_DB_USER};"
# PGPASSWORD=${ADMIN_DB_PASS} ${PSQL} --user=${ADMIN_DB_USER} --host=${LEGACY_PG_HOST} --port=${LEGACY_PG_PORT} -c "GRANT ALL PRIVILEGES ON DATABASE ${LEGACY_PG_DB} TO ${DJANGO_DB_USER};"
PGPASSWORD=${ADMIN_DB_PASS} ${PSQL} --user=${ADMIN_DB_USER} --host=${LEGACY_PG_HOST} --port=${LEGACY_PG_PORT} --dbname=${LEGACY_PG_DB} -c "GRANT USAGE ON SCHEMA public TO ${DJANGO_DB_USER};"
PGPASSWORD=${ADMIN_DB_PASS} ${PSQL} --user=${ADMIN_DB_USER} --host=${LEGACY_PG_HOST} --port=${LEGACY_PG_PORT} --dbname=${LEGACY_PG_DB} -c "GRANT SELECT ON ALL SEQUENCES IN SCHEMA public TO ${DJANGO_DB_USER};"
PGPASSWORD=${ADMIN_DB_PASS} ${PSQL} --user=${ADMIN_DB_USER} --host=${LEGACY_PG_HOST} --port=${LEGACY_PG_PORT} --dbname=${LEGACY_PG_DB} -c "GRANT SELECT ON ALL TABLES IN SCHEMA public TO ${DJANGO_DB_USER};"
PGPASSWORD=${ADMIN_DB_PASS} ${PSQL} --user=${ADMIN_DB_USER} --host=${LEGACY_PG_HOST} --port=${LEGACY_PG_PORT} --dbname=${LEGACY_PG_DB} -c "GRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA public TO ${DJANGO_DB_USER};"
